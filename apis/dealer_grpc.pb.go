// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apis/dealer.proto

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dealer_GetDeal_FullMethodName = "/Dealer/GetDeal"
)

// DealerClient is the client API for Dealer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealerClient interface {
	GetDeal(ctx context.Context, in *GetDealRequest, opts ...grpc.CallOption) (Dealer_GetDealClient, error)
}

type dealerClient struct {
	cc grpc.ClientConnInterface
}

func NewDealerClient(cc grpc.ClientConnInterface) DealerClient {
	return &dealerClient{cc}
}

func (c *dealerClient) GetDeal(ctx context.Context, in *GetDealRequest, opts ...grpc.CallOption) (Dealer_GetDealClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dealer_ServiceDesc.Streams[0], Dealer_GetDeal_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dealerGetDealClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dealer_GetDealClient interface {
	Recv() (*GetDealStream, error)
	grpc.ClientStream
}

type dealerGetDealClient struct {
	grpc.ClientStream
}

func (x *dealerGetDealClient) Recv() (*GetDealStream, error) {
	m := new(GetDealStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DealerServer is the server API for Dealer service.
// All implementations must embed UnimplementedDealerServer
// for forward compatibility
type DealerServer interface {
	GetDeal(*GetDealRequest, Dealer_GetDealServer) error
	mustEmbedUnimplementedDealerServer()
}

// UnimplementedDealerServer must be embedded to have forward compatible implementations.
type UnimplementedDealerServer struct {
}

func (UnimplementedDealerServer) GetDeal(*GetDealRequest, Dealer_GetDealServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeal not implemented")
}
func (UnimplementedDealerServer) mustEmbedUnimplementedDealerServer() {}

// UnsafeDealerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealerServer will
// result in compilation errors.
type UnsafeDealerServer interface {
	mustEmbedUnimplementedDealerServer()
}

func RegisterDealerServer(s grpc.ServiceRegistrar, srv DealerServer) {
	s.RegisterService(&Dealer_ServiceDesc, srv)
}

func _Dealer_GetDeal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDealRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DealerServer).GetDeal(m, &dealerGetDealServer{stream})
}

type Dealer_GetDealServer interface {
	Send(*GetDealStream) error
	grpc.ServerStream
}

type dealerGetDealServer struct {
	grpc.ServerStream
}

func (x *dealerGetDealServer) Send(m *GetDealStream) error {
	return x.ServerStream.SendMsg(m)
}

// Dealer_ServiceDesc is the grpc.ServiceDesc for Dealer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dealer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dealer",
	HandlerType: (*DealerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeal",
			Handler:       _Dealer_GetDeal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/dealer.proto",
}
